Algo{
    begin
        n <- 0
        fillNVT(fv, n, fc)
        fillRes(n, fv, fs)
        fillT(t, fs , n)
    end

}
TDONT{
    mvt = enregistrement{
        num : chaine
        date : chaine 
        mont : reel 
        nat : char 

    }

    fiche : fichier donnees de type mvt 

    sol = ennregitrement { 
        num : chaine 
        mont : reel 

    }
    t : tableau de 100 sol 

}


TDO {
    n : entier
    fv : fiche 
    fs : texte 
    fcc : texte 
    fillMVT, fillRes , fillT : procedure
}

module calc lines 
Fonction Lines (@fs : text):entier 
begin
    ouvrir("compte.txt", fs, "r")
    n <- 0 
    quit = faux 
    tant ques quit = faux faire 
        lire_ln(fs, ele) 
        si long(ele) > 0 alors 
            n <- n+1 
        sinon 
            quit <- vrai 
        fin si 

    fin  tant que 
    fermer(fs)
    retourner n 
end

TDOL{
    n : entier
    quit : booleen 
    ele : chaine 
}


module exist 

Fonction Exist (@fs , ele: chaine):booleen
begin   
    ouvrir("compte.txt", @fs,  "r")
    pour i de 1 a Lines(fs) faire 
        lire_ln(fs, a)
        si a = ele alors 
            retourner vrai
        fin si 
    fin pour 

    fermer(fs)
    retourner faux 
fin     

TDOL{
    a : chaine 
    i : entier

}



fonction isNum(num : chaine):
debut
    pour i de 0 a long(num) -1 faire 
        si num[i] âˆ‰ ["0", "9"] alors 
            retourner faux 
        fin si 
    fin pour

    retourner vrai 
fin 

TDOL{
    i : entier 

}



procedure fillMVT(@fv:fiche, @n:entier, fc:texte):
debut 
    quit <- faux
    ouvrir("compte.txt", fc, "r")
    ouvrir("mvt.dat", fv, "wb")

    tant que quit = faux faire 
        repeter 
            ecrire("enter ")
    
fin