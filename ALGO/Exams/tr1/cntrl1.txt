Algo{
    begin
        n <- 0
        fillNVT(fv, n, fc)
        fillRes(n, fv, fs)
        fillT(t, fs , n)
        pour i de 0 a n-1 faire 
            ecrire(t[i].num)
            ecrire(t[i].mont)
        fin pour 

    end

}
TDONT{
    mvt = enregistrement{
        num : chaine
        date : chaine 
        mont : reel 
        nat : char 

    }

    fiche : fichier donnees de type mvt 

    sol = ennregitrement { 
        num : chaine 
        mont : reel 

    }
    t : tableau de 100 sol 
    

}


TDO {
    n : entier
    fv : fiche 
    fs : texte 
    fcc : texte 
    fillMVT, fillRes , fillT : procedure
}

module calc lines 
Fonction Lines (@fs : text):entier 
begin
    ouvrir("compte.txt", fs, "r")
    n <- 0 
    quit = faux 
    tant ques quit = faux faire 
        lire_ln(fs, ele) 
        si long(ele) > 0 alors 
            n <- n+1 
        sinon 
            quit <- vrai 
        fin si 

    fin  tant que 
    fermer(fs)
    retourner n 
end

TDOL{
    n : entier
    quit : booleen 
    ele : chaine 
}


module exist 

Fonction Exist (@fs , ele: chaine):booleen
begin   
    ouvrir("compte.txt", @fs,  "r")
    pour i de 1 a Lines(fs) faire 
        si i mod 2 != 0 alors 
            lire_ln(fs, a)
            si a = ele alors 
                retourner vrai
            fin si 
        fin si 

    fin pour 

    fermer(fs)
    retourner faux 
fin     

TDOL{
    a : chaine 
    i : entier

}



fonction isNum(num : chaine):booleen
debut
    pour i de 0 a long(num) -1 faire 
        si num[i] âˆ‰ ["0", "9"] alors 
            retourner faux 
        fin si 
    fin pour

    retourner vrai 
fin 

TDOL{
    i : entier 

}



procedure fillMVT(@fv:fiche, @n:entier, fc:texte):
debut 
    quit <- faux
    ouvrir("compte.txt", fc, "r")
    ouvrir("mvt.dat", fv, "wb")

    tant que quit = faux faire 
        repeter 
            ecrire("enter Number")
            lire(bank.num)
        jusqua Exist(fc, bank.num)

        repeter 
            ecrire("enter day")
            lire(day)
            ecrire("entter month")
            lire(month)
            ecrire("enter year")
            lire(year)

        jusqua isNum(day) et isNum(month) et isNum(year) et long(year) =4 et long(day) = 2 et long(month = 2)

        bank.date <- day + "/" + month + "/" + year

        repeter 
            ecrire("eter mont")
            lire(bank.mont)
        jusqua mont > 0
        repeter
            ecrire ("nt")
            lire(bank.nat)
        jusqua nat = "D" ou nat = "C"


        ecrire(fv, bank)


        ecrire("Another one ? y/n")
        repeter
            ecrire("enter your answer y/n")
            lire(ans)
        jusqua  ans = "y"  ou ans = "n"

        si ans =  "n"   alors
            quit <- vrai
        fin is 

    fin tant que 



 


fin

procedure Sort(t:t) 
debut 
    pour i de 0 a long(t)-2 faire
        si t[i].mont > t[i+1].mont alors 
            aux <- t[i]
            t[i]<- t[i+1]            
            t[i+1] <- aux 
            Sort(t)
fin
TDOL{
    i : entier
    Sort : procedure 
    aux : sol 
    
}

procedure fillRes(n:enteir, @fv:fiche, @fs:text)
debut 
    ouvrir("mvt.dat", fv, "rb")
    ouvrir("result.txt", fs, "w")
    
    pour i de 1 a n faire 
        lire(fv, bank)
        trans <- 0
        pour j de 1 a n faire 
            lire(fv , b)
            si i != j faire 
                si bank.num = b.num alors 
                    si b.num = "D" alors 
                        trans <- trans - b.mont 
                    sinon 
                        trans <- trans + b.mont
                    sin si 
                fin si 
            fin si 
        fin pour 
        si bank.nat = "D" alors 
                trans <- trans - bank.mont 
        sinon 
            trans <- trans + bank.mont 
        fin si 

        sol.num <- bank.num 
        sol.mont <- trans
        t[i] <- sol



        
    fin pour 
    Sort(t)
    pour i de 0 a n-1 faire 
        ecrire_ln(fs, t[i].num + " " + convch(t[i].mont))
    fin pour 

    fermer(fs)
    fermer(fv)


fin

TDOL{
    i : entier 
    t : sol 
    j : entier
    Sort  : procedure 
    trans : reel 
    sol : sol 
    bank : mvt 
    b : mvt 

}


procedure filT(t:t, @fs:text, n:entier)
debut 
    ouvrir("result.txt", fs , "r")

    pour i de 1 a n faire 
        lireln(fs, a)

        num <- ""
        mont <- ""
        j <- 0
        repeter
            num <- num + a[j]
        jusqua a[j] = " "

        repeter 
            mont <- mont + a[j]
        jusqua j = long(a) -1 


        sol.num <- num
        sol.mont <- mont 
        
        t[i] <- sol 
    fin pour 
    
fin 

TDOL{
    sol : sol 
    a : chaine 
    num : chaine 
    mont : chaine 
    j , i : entier 

}